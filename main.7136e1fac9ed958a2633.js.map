{"version":3,"sources":["webpack:///./task-3.js"],"names":["makeTransaction","transaction","min","max","delay","Math","floor","random","canProcess","Promise","resolve","reject","setTimeout","logSuccess","id","console","log","logError","warn","amount","then"],"mappings":"2JAsBMA,EAAkB,SAAAC,GAtBU,IAACC,EAAKC,EAuBtCF,EAAYG,OAvBqBF,EAuBa,IAvBRC,EAuBa,IAtB5CE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAuBpD,IAAMM,EAAaH,KAAKE,SAAW,GAEnC,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC7BC,YAAW,WACLJ,EACFE,EAAQT,GAERU,EAAOV,KAERA,EAAYG,WAIjB,SAASS,EAAT,GAAgC,IAAXC,EAAW,EAAXA,GAAIV,EAAO,EAAPA,MACrBW,QAAQC,IAAR,eAA2BF,EAA3B,iBAA8CV,EAA9C,MAGJ,SAASa,EAAT,GAAuB,IAAJH,EAAI,EAAJA,GACfC,QAAQG,KAAR,gCACkCJ,EADlC,6BAiBJd,EAAgB,CAAEc,GAAI,GAAIK,OAAQ,MAAOC,KAAKP,EAAYI,GAE1DjB,EAAgB,CAAEc,GAAI,GAAIK,OAAQ,MAAOC,KAAKP,EAAYI,GAE1DjB,EAAgB,CAAEc,GAAI,GAAIK,OAAQ,KAAMC,KAAKP,EAAYI,GAEzDjB,EAAgB,CAAEc,GAAI,GAAIK,OAAQ,MAAOC,KAAKP,EAAYI,K","file":"main.7136e1fac9ed958a2633.js","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n// 2 варианта, в 1м выпадала ошибка \"Uncaught (in promise) undefined\" отловить в rejecte не получилось\r\n\r\n// Кривой, но рабочий\r\n// const makeTransaction = transaction => {\r\n//     const delay = randomIntegerFromInterval(200, 500);\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     return new Promise((resolve, reject) => {\r\n//     setTimeout(() => {\r\n//       if (canProcess) {\r\n//         resolve(logSuccess(transaction.id, delay));\r\n//       } else {\r\n//         reject(logError(transaction.id))\r\n//       }\r\n//     }, delay);\r\n//   });\r\n// };\r\n\r\n//  Рабочий\r\nconst makeTransaction = transaction => {\r\n  transaction.delay = randomIntegerFromInterval(200, 500);\r\n  const canProcess = Math.random() > 0.3;\r\n\r\n  return new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    if (canProcess) {\r\n      resolve(transaction);\r\n    } else {\r\n      reject(transaction)\r\n    }\r\n  }, transaction.delay);\r\n});\r\n};\r\n\r\nfunction logSuccess({id, delay}){\r\n    console.log(`Transaction ${id} processed in ${delay}ms`);\r\n  };\r\n\r\nfunction logError({id}){\r\n    console.warn(\r\n      `Error processing transaction ${id}. Please try again later.`\r\n    );\r\n  };\r\n\r\n\r\n// Кривой, но рабочий\r\n// makeTransaction({ id: 70, amount: 150 }).catch(e => {})\r\n\r\n// makeTransaction({ id: 71, amount: 230 }).catch(e => {})\r\n\r\n// makeTransaction({ id: 72, amount: 75 }).catch(e => {})\r\n\r\n// makeTransaction({ id: 73, amount: 100 }).catch(e => {})\r\n\r\n\r\n// Рабочий\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess, logError)\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess, logError)\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess, logError)\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess, logError)\r\n"],"sourceRoot":""}