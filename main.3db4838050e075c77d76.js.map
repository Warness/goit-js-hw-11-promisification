{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-2.js","webpack:///./task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","canProcess","logSuccess","id","logError","warn","amount","catch"],"mappings":"2JACMA,EAAQ,SAAAC,GAMV,OALgB,IAAIC,SAAQ,SAACC,GACzBC,YAAW,WACPD,EAAQF,KACTA,OAKHI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCfbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAAAC,GACfA,EAASW,EAASE,KAAI,SAAAC,GAAI,OACtBA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAKnEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GClBnC,IAIMe,EAAkB,SAAAC,GACtB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAN+BC,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAM5CK,EAAaH,KAAKE,SAAW,GAEnCvB,YAAW,WACLwB,EACFC,EAAWR,EAAYS,GAAI9B,GAG3B+B,EAASV,EAAYS,MAEtB9B,OAID6B,EAAa,SAACC,EAAIxB,GACpBC,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CxB,EAA9C,OAGEyB,EAAW,SAAAD,GACbvB,QAAQyB,KAAR,gCACkCF,EADlC,8BAKJV,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,GAEhEX,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,GAEhEX,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,KAAMxB,KAAKoB,GAAYK,MAAMH,GAE/DX,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,K","file":"main.3db4838050e075c77d76.js","sourcesContent":["\r\nconst delay = ms => {\r\n    const promise = new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms)\r\n        }, ms);\r\n    })\r\n    return promise\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\nconst toggleUserState = (allUsers, userName,) => {\r\n    return new Promise(resolve => {\r\n        resolve (allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n          ))\r\n    });\r\n}\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        logSuccess(transaction.id, delay)\r\n        return\r\n      } else {\r\n        logError(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n\r\nconst logError = id => {\r\n    console.warn(\r\n      `Error processing transaction ${id}. Please try again later.`,\r\n    );\r\n  };\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}