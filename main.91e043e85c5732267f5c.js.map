{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-2.js","webpack:///./task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","canProcess","reject","logSuccess","id","logError","warn","amount"],"mappings":"2JACMA,EAAQ,SAAAC,GAMV,OALgB,IAAIC,SAAQ,SAACC,GACzBC,YAAW,WACPD,EAAQF,KACTA,OAKHI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCfbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAAAC,GACfA,EAASW,EAASE,KAAI,SAAAC,GAAI,OACtBA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAKnEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GClBnC,IAsBMe,EAAkB,SAAAC,GAtBU,IAACC,EAAKC,EAuBtCF,EAAYrB,OAvBqBsB,EAuBa,IAvBRC,EAuBa,IAtB5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAuBpD,IAAMK,EAAaH,KAAKE,SAAW,GAEnC,OAAO,IAAIxB,SAAQ,SAACC,EAASyB,GAC7BxB,YAAW,WACLuB,EACFxB,EAAQkB,GAERO,EAAOP,KAERA,EAAYrB,WAIjB,SAAS6B,EAAT,GAAgC,IAAXC,EAAW,EAAXA,GAAI9B,EAAO,EAAPA,MACrBO,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8C9B,EAA9C,MAGJ,SAAS+B,EAAT,GAAuB,IAAJD,EAAI,EAAJA,GACfvB,QAAQyB,KAAR,gCACkCF,EADlC,6BAiBJV,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,MAAOxB,KAAKoB,EAAYE,GAE1DX,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,MAAOxB,KAAKoB,EAAYE,GAE1DX,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,KAAMxB,KAAKoB,EAAYE,GAEzDX,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,MAAOxB,KAAKoB,EAAYE,K","file":"main.91e043e85c5732267f5c.js","sourcesContent":["\r\nconst delay = ms => {\r\n    const promise = new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms)\r\n        }, ms);\r\n    })\r\n    return promise\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\nconst toggleUserState = (allUsers, userName,) => {\r\n    return new Promise(resolve => {\r\n        resolve (allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n          ))\r\n    });\r\n}\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n// 2 варианта, в 1м выпадала ошибка \"Uncaught (in promise) undefined\" отловить в rejecte не получилось\r\n\r\n// Кривой, но рабочий\r\n// const makeTransaction = transaction => {\r\n//     const delay = randomIntegerFromInterval(200, 500);\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     return new Promise((resolve, reject) => {\r\n//     setTimeout(() => {\r\n//       if (canProcess) {\r\n//         resolve(logSuccess(transaction.id, delay));\r\n//       } else {\r\n//         reject(logError(transaction.id))\r\n//       }\r\n//     }, delay);\r\n//   });\r\n// };\r\n\r\n//  Рабочий\r\nconst makeTransaction = transaction => {\r\n  transaction.delay = randomIntegerFromInterval(200, 500);\r\n  const canProcess = Math.random() > 0.3;\r\n\r\n  return new Promise((resolve, reject) => {\r\n  setTimeout(() => {\r\n    if (canProcess) {\r\n      resolve(transaction);\r\n    } else {\r\n      reject(transaction)\r\n    }\r\n  }, transaction.delay);\r\n});\r\n};\r\n\r\nfunction logSuccess({id, delay}){\r\n    console.log(`Transaction ${id} processed in ${delay}ms`);\r\n  };\r\n\r\nfunction logError({id}){\r\n    console.warn(\r\n      `Error processing transaction ${id}. Please try again later.`\r\n    );\r\n  };\r\n\r\n\r\n// Кривой, но рабочий\r\n// makeTransaction({ id: 70, amount: 150 }).catch(e => {})\r\n\r\n// makeTransaction({ id: 71, amount: 230 }).catch(e => {})\r\n\r\n// makeTransaction({ id: 72, amount: 75 }).catch(e => {})\r\n\r\n// makeTransaction({ id: 73, amount: 100 }).catch(e => {})\r\n\r\n\r\n// Рабочий\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess, logError)\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess, logError)\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess, logError)\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess, logError)\r\n"],"sourceRoot":""}